util 工具包
conf 配置包 -> 初始化配置
handler 责任链 -> 责任链配置 入口 sentence处理 -> phrase处理 -> word处理
component 组件 -> Sentence phrase word模版类
 main -> 主函数 输入输出





处理流程：
1 读取配置 初始化各组件
2 输入 饭店 食物 文章模版
3 责任链： 文章模版 -> Sentence责任链 -> Phrase责任链 -> Word责任链 -> 解析饭店和食物名
4 输出


责任链组装：
责任链入口 -> sentence责任链（sentence list) -> phrase责任链(phrase list) -> word责任链(word list) [处理固定占位符（饭店 食物)]
               对于食物模板 复制n次


文章模板：
餐厅
食物n
结论
。。
现阶段：组件全部为字符串层的解析。。如果解析成对象，就可以用上面向对象的特性（组件解析成下一层的时候带上上层属性。。实现上下文关联）。。。马勒戈壁啥时候是个头啊

（假定模板层不会直接有food标签
对于食物sentence需要复制并区分食物序号：
字符串层的解析
复制sentence的方法：
方案1：sentence带上食物标签属性，责任链解析时按照食物数量复制[区分食物序号的方法，没想到]
方案2：约定sentence占位符带有food的为需要复制的，责任链解析

区分食物序号方法：
方案1：FOOD_NAME分成FOOD_NAME1 FOOD_NAME2 （感觉行不通，因为要从sentence列表复制开始 到phrase word一直传递序号属性 字符串层面怎么传递？
方案2：每一个食物sentence结束后加入一个特殊符号，区分一个食物sentence的结束 解析食物名称的时候 顺序读 遇到[符号]时序号加1 局限性:1.文章中有[符号]时会扰乱序号 2.食物只能顺序解析（一段一个食物） 对于乱序的文章 还是需要有序号标记

{FOOD_N}{sentence}{/FOOD_N}
{FOOD_1}{sentence}{/FOOD_1}
对于N标记内的组件，复制食物数量次变成{FOOD_0}{sentence}{/FOOD_0} {FOOD_1}{sentence}{/FOOD_1} ..
WordHandler对于序号标记内的FOOD_NAME解析成数组index的食物名称
对于无标记的FOOD_NAME则为孤儿，取任意一个食物名称

文章模板：
餐厅
食物1
食物2
食物3
...
结论

文章模板：
餐厅
食物random
食物random
食物random
...
结论